/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */

html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove default margin.
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */

[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */

a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */

dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */

hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */

pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */

input[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  box-sizing: content-box; /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

.text-left {
  text-align: left;
}
.text-right {
  text-align: right;
}
.text-center {
  text-align: center;
}
.vertical-top {
  vertical-align: top;
}
.vertical-middle {
  vertical-align: middle;
}
.vertical-bottom {
  vertical-align: bottom;
}
.vertical-sub {
  vertical-align: sub;
}
.vertical-baseline {
  vertical-align: baseline;
}
.float-left {
  float: left;
}
.float-right {
  float: right;
}
.hidden {
  display: none;
}
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.inline-block {
  display: inline-block;
}
.table {
  display: table;
}
.table-row {
  display: table-row;
}
.table-cell {
  display: table-cell;
}
.border-box {
  box-sizing: border-box;
}
.no-long,
.no-top {
  top: 0px;
}
.no-long,
.no-bottom {
  bottom: 0px;
}
.no-wide,
.no-left {
  left: 0px;
}
.no-wide,
.no-right {
  right: 0px;
}
.margin-auto {
  margin: auto;
}
.no-border-spacing {
  border-spacing: 0;
}
.fill,
.fill__long {
  height: 100%;
}
.fill,
.fill__wide {
  width: 100%;
}
.fill--25p,
.fill--25p__long {
  height: 25%;
}
.fill--25p,
.fill--25p__wide {
  width: 25%;
}
.fill--50p,
.fill--50p__long {
  height: 50%;
}
.fill--50p,
.fill--50p__wide {
  width: 50%;
}
.fill--75p,
.fill--75p__long {
  height: 75%;
}
.fill--75p,
.fill--75p__wide {
  width: 75%;
}
.text-inherit-color {
  color: inherit;
}
.back-transparent {
  color: rgba(0,0,0,0);
}
.text-white {
  color: #fff;
}
.text-black {
  color: #000;
}
.text-blue {
  color: #6091b2;
}
.back-white {
  background-color: #fff;
}
.back-dark-gray {
  background-color: #3f3f41;
}
.back-dark-gray--translucent {
  background-color: rgba(255,255,255,0.75);
}
.border-white {
  border: 1px solid #fff;
}
.border-white__bottom {
  border-bottom: 1px solid #fff;
}
.border-black {
  border: 1px solid #000;
}
.text-gray--light {
  color: #ddd;
}
.text-gray--subtle {
  color: #7e7e7e;
}
.text-decoration-none {
  text-decoration: none;
  text-align: center;
  color: #333;
}
.back-gray {
  background-color: rgba(102,102,102,0.9);
}
.back-gray--dark {
  background-color: #222327;
}
.feedback-outline-orange:hover,
.feedback-outline-orange:active,
.feedback-outline-orange:focus {
  outline: 1px solid #ffa500;
}
.clear {
  clear: both;
}
.clearfix {
  overflow: auto;
}
@media screen and (max-width: 500px) {
  .mobile-mq-hide {
    display: none;
  }
}
.border-radius {
  border-radius: 5px;
}
.pointer {
  cursor: pointer;
}
.no-wrap {
  white-space: nowrap;
}
.no-border {
  border: none;
}
.overflow-auto {
  overflow: auto;
}
.overflow-visible {
  overflow: visible;
}
.overflow-visible {
  overflow: hidden;
}
.ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.z-index-map {
  z-index: 30;
}
.z-index-controls {
  z-index: 40;
}
.z-index-panel {
  z-index: 50;
}
.z-index-logo {
  z-index: 60;
}
.flex {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
      -ms-flex-direction: row;
          flex-direction: row;
}
html,
body {
  padding: 0px;
  margin: 0px;
  position: relative;
  height: 100%;
  width: 100%;
  background: #fff;
}
body {
  overflow: hidden;
}
ul {
  list-style: none;
  padding: 0px;
  margin: 0px;
}
button {
  cursor: pointer;
}
.button--plain {
  border: none;
  background: none;
}
.button--link {
  border: none;
  background: none;
  color: #00e;
  text-decoration: underline;
  cursor: pointer;
}
.button--blue {
  font-family: inherit;
  border: none;
  color: #fff;
  background: #6091b2;
}
.button--blue:active,
.button--blue:hover,
.button--blue:focus,
.button--blue.active {
  background: #e86850;
}
.button--esri {
  background-color: #fff;
  border: none;
  width: 32px;
  height: 32px;
  border: 1px solid #57585a;
  outline: none;
  padding: 0;
}
.button--esri:hover,
.button--esri:active {
  background-color: #eee;
}
.root,
.app {
  height: 100%;
}
.app {
  position: relative;
  border: 1px solid #e0e0e0;
}
.app__logo {
  top: 20px;
  left: 20px;
  opacity: 0.5;
  transition: all 0.25s;
}
.app__logo:hover {
  opacity: 1;
}
.app__logo img {
  height: 100px;
}

/*# sourceMappingURL=data:application/json;base64, */